const BallColor = Object.freeze({
    WHITE: Symbol("white"),
    RED: Symbol("red"),
    YELLOW: Symbol("yellow"),
});
class Ball {
    constructor(position, color = BallColor.WHITE) {
        this.id = this.generateId()
        this.position = position; // Vector2D
        this.color = color; // Ch·ªâ nh·∫≠n 3 m√†u h·ª£p l·ªá ki·ªÉu enum
        this.isInHole = false; // B√≥ng c√≥ v√†o l·ªó kh√¥ng ki·ªÉu bool
        this.vantoc = new Vector2D(0, 0); // V·∫≠n t·ªëc ban ƒë·∫ßu
        this.firstCollide=null;

        if (color == BallColor.YELLOW) {
            this.img = PoolGame.getInstance().assets.images["ball_Yellow"];
        } else if (color == BallColor.RED) {
            this.img = PoolGame.getInstance().assets.images["ball_Red"];
        } else {
            this.img = PoolGame.getInstance().assets.images["ball_White"];
            this.color = BallColor.WHITE; // Ch·ªâ nh·∫≠n 3 m√†u h·ª£p l·ªá ki·ªÉu enum
        }
        Ball.origin = Object.freeze(new Vector2D(this.img.width / 2, this.img.height / 2));
    }

    update(deltaTime) {
        if (this.isMoving()) {
            //console.log(this.vantoc)
            this.position = this.position.add(this.vantoc.multiply(deltaTime));// N·∫øu ƒëang di chuy·ªÉn l·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªông th√™m v*t(qu√£ng ƒë∆∞·ªùng v·ª´a di chuy·ªÉn deltatime)
            this.updateMoving(deltaTime);
        }
    }

    draw() {
        // Code h√†m v·∫Ω b√≥ng t·∫°i ƒë√¢y
        if (this.isInHole == false) PoolGame.getInstance().myCanvas.DrawImage(this.img, this.position, 0, Ball.origin);
    }

    updateMoving(deltaTime) { // update v·ªã tr√≠ c·ªßa b√≥ng
        const friction = 0.99; // Ma s√°t ƒë·ªÉ b√≥ng gi·∫£m t·ªëc
        this.vantoc = this.vantoc.multiply(friction);
        //magnitude() l√† h√†m t√≠nh ƒë·ªô l·ªõn c·ªßa vector (ƒë·ªãnh l√Ω Pitago)
        if (this.vantoc.magnitude() < 0.01) {
            this.vantoc = new Vector2D(0, 0); // D·ª´ng b√≥ng n·∫øu t·ªëc ƒë·ªô qu√° nh·ªè
        }
    }



    CollideBall(that) {
        let distance = this.position.subtract(that.position).magnitude();
        let ballRadius = this.img.width / 2;

        if (distance <= ballRadius * 2) {
            if(this.firstCollide==null){
                this.firstCollide=that;
            }
            if(that.firstCollide==null){
                that.firstCollide=this;
            }
            let normal = this.position.subtract(that.position).normalize();
            let relativeVelocity = this.vantoc.subtract(that.vantoc);
            let speed = relativeVelocity.dot(normal);

            if (speed > 0) return; // N·∫øu b√≥ng ƒëang t√°ch xa nhau th√¨ kh√¥ng x·ª≠ l√Ω

            // üîπ C√¥ng th·ª©c va ch·∫°m hai v·∫≠t c√≥ c√πng kh·ªëi l∆∞·ª£ng
            let newVantoc1 = this.vantoc.subtract(normal.multiply(speed));
            let newVantoc2 = that.vantoc.add(normal.multiply(speed));

            // √Åp d·ª•ng ma s√°t t·ª´ t·ª´
            let friction = 0.99; // Gi·∫£m t·ªëc nh·∫π d·∫ßn
            this.vantoc = newVantoc1.multiply(friction);
            that.vantoc = newVantoc2.multiply(friction);
        }
    }



    CollideWall() {
        //Code b√≥ng va ch·∫°m th√†nh b√†n ·ªü ƒë√¢y
        let board = PoolGame.getInstance().gameWorld.board; // L·∫•y ƒë·ªëi t∆∞·ª£ng b√†n
        let radius = this.img.width / 2; // B√°n k√≠nh b√≥ng

        // Ki·ªÉm tra va ch·∫°m v·ªõi vi·ªÅn tr√°i & ph·∫£i
        if (this.position.x - radius <= board.leftWall || this.position.x + radius >= board.width - board.rightWall) {
            this.vantoc.x *= -1; // ƒê·∫£o ng∆∞·ª£c h∆∞·ªõng X
            this.position.x = Math.max(board.leftWall + radius, Math.min(this.position.x, board.width - board.rightWall - radius));
        }

        // Ki·ªÉm tra va ch·∫°m v·ªõi vi·ªÅn tr√™n & d∆∞·ªõi
        if (this.position.y - radius <= board.topWall || this.position.y + radius >= board.height - board.bottomWall) {
            this.vantoc.y *= -1; // ƒê·∫£o ng∆∞·ª£c h∆∞·ªõng Y
            this.position.y = Math.max(board.topWall + radius, Math.min(this.position.y, board.height - board.bottomWall - radius));
        }
    }

    CollideHole() {
        //Code b√≥ng v√†o l·ªó ·ªü ƒë√¢y
        let board = PoolGame.getInstance().gameWorld.board; // L·∫•y ƒë·ªëi t∆∞·ª£ng b√†n
        let radius = this.img.width / 2; // B√°n k√≠nh b√≥ng

        for (let hole of board.HolePosition) {
            let distance = this.position.subtract(hole).magnitude();

            if (distance <= board.HoleRadius - radius) {
                this.isInHole = true;

                if (this.color === BallColor.WHITE) {
                    //console.log("‚ö†Ô∏è B√≥ng tr·∫Øng ƒë√£ v√†o l·ªó!");
                    // X·ª≠ l√Ω logic khi b√≥ng tr·∫Øng v√†o l·ªó, v√≠ d·ª•:
                    //PoolGame.getInstance().gameWorld.onWhiteInHole();
                }


                break;
            }
        }
    }

    generateId() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0,
                v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }


    isMoving() {
        return !this.isInHole && this.vantoc.magnitude() > 0;
    }
    angleToBall(that) {
        let direction = that.position.subtract(this.position);
        return Math.atan2(-direction.y, direction.x); // ƒê·∫£o y ƒë·ªÉ gi·ªØ h·ªá to√°n h·ªçc
    }

    angleToHole(hole) {
        let direction = hole.subtract(this.position);
        return Math.atan2(-direction.y, direction.x); // ƒê·∫£o y ƒë·ªÉ gi·ªØ h·ªá to√°n h·ªçc
    }
    resetFirstCollide(){
        this.firstCollide=null;
    }
}


